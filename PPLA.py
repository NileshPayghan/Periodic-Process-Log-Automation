"""
Name: Periodic Process Log Automation (PPLA)
Modified:2019
Author: Nilesh payghan
Input: 
output: 
Description: 
    • It is automation based project written in python.
    • It generates the log on server system and store it on particular location.
    • It also logs memory usage in percentage of process and it’s number of child processes.
    • After generating log it sends log to spacified email address.
    •
Additional Features:
    • If you want to kill the child process then you want to make some change into code.
 

Usage : python PPLA.py {time_interval} {-min|-hr}
 """
import sys
import schedule
import time
import psutil
import os
import urllib.request
import email.mime.multipart
import email.mime.text
import email.mime.base
import email
import smtplib
from collections import deque

#uses queue for sending first log which were created FIFO.
process_log_pending_paths = deque()

def convert_bytes(n):
    symbols = ('K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')
    prefix = {}
    for i, s in enumerate(symbols):
        prefix[s] = 1 << (i + 1) * 10
    for s in reversed(symbols):
        if n >= prefix[s]:
            value = float(n) / prefix[s]
            return '%.1f%s' % (value, s)
    return "%sB" % n

def is_connected():
	try:
		urllib.request.urlopen("https://google.com",timeout=1)
		return True
	except:
		return False
	return False

def ProcessLogMailSender(process_log_pending_paths):
	fromaddr = "nileshpayghan3@gmail.com"
	toaddr = "nileshpayghan7@gmail.com"
	try:
		for filepath in range(len(process_log_pending_paths)):
			if process_log_pending_paths:
				filepath = process_log_pending_paths.popleft()
			
			msg = email.mime.multipart.MIMEMultipart()
			msg['From'] = fromaddr
			msg['To'] = toaddr
			body = """Hello %s
			Please check process log information, attached to email.
			
			Log File is Located on server at following
			location:- %s 
			
			Thanks and Regards,
			Nilesh
			
			This is autogenerated mail by system with particular time intervals.
			"""%(toaddr,filepath)
			#print(body)
			subject = f"Process log created on server at {os.path.basename(filepath).split('_')[-1]}"
			#print(subject)
			
			msg['Subject'] = subject
			
			msg.attach(email.mime.text.MIMEText(body,'plain'))
			
			attachment = open(filepath,'rb')
			
			p = email.mime.base.MIMEBase('application','octet-stream')
			
			p.set_payload((attachment).read())
			
			email.encoders.encode_base64(p)
			p.add_header('Content-Disposition',"attachment;filename=%s"%filepath)
			msg.attach(p)
			
			s = smtplib.SMTP('smtp.gmail.com',587)
			
			s.starttls()
			
			s.login(fromaddr,'password')#smtplib.SMTPAuthenticationError: (535, b'5.7.8 Username and Password not accepted. Learn more at\n5.7.8  https://support.google.com/mail/?p=BadCredentials p17sm35315695pfn.31 - gsmtp')
			
			#https://myaccount.google.com/lesssecureapps => to allow unknow sources to send email from script
			
			text = msg.as_string()
			s.sendmail(fromaddr,toaddr,text)
			s.quit()
			print(f"INFO: File sended successfully {filepath}")
	except Exception as e:
		if filepath not in process_log_pending_paths:
			process_log_pending_paths.append(filepath)
		print("ERROR: error occured during sending file, Files will be send later...%s"%filepath)
			
	
	

def CreateRunningProcessLog(location="."):
	file_time = time.ctime()
	filepath = os.path.join(location,'process_log_'+file_time)#absolute path of process-log file
	
	with open(filepath,'w') as open_file:
		open_file.write(f"{'-'*10} Process log Taken at {file_time} {'-'*10}\n")
		
		for proc in psutil.process_iter():
			try:
				#print(len(proc.children()))
				proc_info = proc.as_dict(attrs=['pid','name','username'])
				#print(proc_info)
				#print(proc.memory_full_info())#pfullmem(rss=21942272, vms=68739072, shared=10469376, text=2322432, lib=0, data=11771904, dirty=0, uss=11542528, pss=12068864, swap=0)
				#https://psutil.readthedocs.io/en/latest/#psutil.Process.memory_full_info
				memory = proc.memory_full_info()
				#pss_memory = convert_bytes(memory.swap)
				#print(pss_memory)
				#rss_percent = round(proc.memory_percent(memtype='pss'),2)
				#print(rss_percent)

				open_file.write(f"PID: {proc_info['pid']}; Name: {proc_info['name']}; Number of Child Processes: {len(proc.children())}; Rss_memory (rss): {convert_bytes(memory.rss)}; Percentage:{round(proc.memory_percent(memtype='rss'),2)}%; Proportional Set Size (pss): {convert_bytes(memory.pss)}; Swap: {convert_bytes(memory.swap)}; Username: {proc_info['username']}\n")
			except psutil.AccessDenied as e:
				print(e)
			except psutil.NoSuchProcess as e:
				print(e)
			except Exception as e:
				print(e)
		
	
	if is_connected():
		process_log_pending_paths.append(filepath)
		ProcessLogMailSender(process_log_pending_paths)
	else:
		if filepath not in process_log_pending_paths:
			process_log_pending_paths.append(filepath)
		print("WRN: File is not sended %s"%(filepath))
		print("ERROR: Please connect to internet")
		

def usage():
	s = """python3 Process_monitor_log_sender.py TIME_INTERVAL {-min|-hr}
TIME INTERVAL: provide time in minutes to script to send process log to specific email.
"""
	return s


def helper():
	s= """This is Automation script which creates log of processes which are running on the system.
Then send created log mail to specific email address.
-u : To check the usage of script.
"""
	return s


def main():
	if len(sys.argv)<2:
		print("ERROR: Please Enter correct number of arguments")
		print("INFO: Use -h or -u for help and it's usage")
		exit() 
	if sys.argv[1].lower() == '-h':
		print(helper())
		exit()
	if sys.argv[1].lower() == '-u':
		print(usage())
		exit()
	try:
		time_given = float(sys.argv[1])
		#CreateRunningProcessLog()#creates logs to specific directory
		if sys.argv[2].lower() == '-min':
			CreateRunningProcessLog()
			schedule.every(time_given).minutes.do(CreateRunningProcessLog)
		elif sys.argv[2].lower() == '-hr':
			#print("Every Hour")
			CreateRunningProcessLog()
			schedule.every(time_given).hour.do(CreateRunningProcessLog)
		else:
			print("ERROR: Please provide correct Arguments...")
			print("INFO: Use -h or -u for help and it's usage")
			exit()
		
		while True:
			schedule.run_pending()
			time.sleep(1)
	except:
		print("ERROR: Please provide correct Arguments...")
		print("INFO: Use -h or -u for help and it's usage")

if __name__ == "__main__":
	main()
